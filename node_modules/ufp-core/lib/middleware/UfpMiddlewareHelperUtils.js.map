{"version":3,"sources":["../../src/middleware/UfpMiddlewareHelperUtils.js"],"names":["PropTypesCheck","data","propTypes","e","getJSON","res","contentType","headers","get","emptyCodes","indexOf","status","json","Promise","resolve","isEmptyObject","obj","prop","hasOwnProperty","JSON","stringify","errorToObject","err","Error","TypeError","keys","out","message","stack","code","Object","i","length","Response","parse","validateStatus","mergeArrayOfObjects","arr","selector","t","reduce","acc","curr","createAxiosLikeErrorResponse","config","response","addToArrayIfNotExist","item","push","createConfigDefault","infoLogger","ReactPropTypesCheck"],"mappings":"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","file":"UfpMiddlewareHelperUtils.js","sourcesContent":["import merge from 'deepmerge'\nimport {ReactPropTypesCheck} from '../utils/ReactPropTypesCheck'\n// console.log('xxxxxxxxxxxxxxxxxxxxxxxxxx', ReactPropTypesCheck)\n\nfunction PropTypesCheck(data, propTypes) {\n    try {\n        ReactPropTypesCheck(data, propTypes, true)\n        return true\n    } catch (e) {\n        // console.error('Validation error', e)\n        return false\n    }\n}\n/**\n * Extract JSON body from a server response made with fetch\n *\n * @function getJSON\n * @access public\n * @param {object} res - A raw response object\n * @returns {promise|undefined}\n */\nexport const getJSON = async(res) => {\n    const contentType = res.headers.get('Content-Type')\n    const emptyCodes = [204, 205]\n\n    if (!~emptyCodes.indexOf(res.status) && contentType && ~contentType.indexOf('json')) {\n        return res.json()\n    } else {\n        return Promise.resolve({})\n    }\n}\n\nfunction isEmptyObject(obj) {\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            return false\n        }\n    }\n    return JSON.stringify(obj) === JSON.stringify({})\n}\n\nfunction errorToObject(err) {\n    if (!(err instanceof Error)) {\n        throw new TypeError('invalid input argument. Must provide an error object. Value: `' + err + '`.')\n    }\n    var keys\n    var out = {}\n    out.errorToObject = true\n    out.message = err.message\n    if (err.stack) {\n        out.stack = err.stack\n    }\n    // Possible Node.js (system error) properties...\n    if (err.code) {\n        out.code = err.code\n    }\n    // Any enumerable properties...\n    keys = Object.keys(err)\n    for (var i = 0; i < keys.length; i++) {\n        if (err[keys[i]] instanceof Response) {\n            out[keys[i]] = err[keys[i]]\n        } else {\n            out[keys[i]] = JSON.parse(JSON.stringify(err[keys[i]]))\n        }\n    }\n    return out\n}\n\nfunction validateStatus(status) {\n    return status >= 200 && status < 300\n}\n\nconst mergeArrayOfObjects = (arr, selector = (t) => t) => {\n    return arr.reduce((acc, curr) => {\n        return merge(acc, selector(curr) || {})\n    }, {})\n}\nconst createAxiosLikeErrorResponse = async(config, code, response) => {\n    var err = new Error('Request failed with status code ' + response.status)\n    err.config = config\n    if (code) {\n        err.code = code\n    }\n    err.response = response\n    err.response.data = await getJSON(response)\n    return err\n}\n\nconst addToArrayIfNotExist = (arr, item) => {\n    if (arr.indexOf(item) === -1) {\n        arr.push(item)\n    }\n}\n\nconst createConfigDefault = (config) => {\n    config.headers = {\n        'Content-Type': 'application/json'\n    }\n    return config\n}\n\nfunction infoLogger() {\n    // console.log.apply(console, arguments)\n}\n\nexport default {\n    ReactPropTypesCheck,\n    PropTypesCheck,\n    getJSON,\n    isEmptyObject,\n    errorToObject,\n    validateStatus,\n    mergeArrayOfObjects,\n    createAxiosLikeErrorResponse,\n    addToArrayIfNotExist,\n    createConfigDefault,\n    infoLogger\n}\n"]}