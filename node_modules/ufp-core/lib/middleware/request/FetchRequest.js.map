{"version":3,"sources":["../../../src/middleware/request/FetchRequest.js"],"names":["createAxiosLikeErrorResponse","config","code","response","err","Error","status","data","FetchRequest","ufpMiddlewareRequest","fetch","fetchUrl","method","body","credentials","headers","requestResponse","isResolve","responseClone","clone","result"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA,IAAMA;AAAA,wFAA+B,iBAAMC,MAAN,EAAcC,IAAd,EAAoBC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,2BAD6B,GACvB,IAAIC,KAAJ,CAAU,qCAAqCF,SAASG,MAAxD,CADuB;;AAEjCF,4BAAIH,MAAJ,GAAaA,MAAb;AACA,4BAAIC,IAAJ,EAAU;AACNE,gCAAIF,IAAJ,GAAWA,IAAX;AACH;AACDE,4BAAID,QAAJ,GAAeA,QAAf;AANiC;AAAA,+BAOP,uCAAQA,QAAR,CAPO;;AAAA;AAOjCC,4BAAID,QAAJ,CAAaI,IAPoB;AAAA,yDAQ1BH,GAR0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAWA,IAAMI,eAAe;;AAEjBC;AAAA,6FAAsB,kBAAMR,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAKMS,MAAMT,OAAOU,QAAb,EAAuB;AAC3CC,wCAAQX,OAAOW,MAD4B;AAE3CC,sCAAMZ,OAAOM,IAF8B;AAG3CO,6CAAab,OAAOa,WAHuB;AAI3CC,yCAASd,OAAOc,OAAP,IAAkB;AAJgB,6BAAvB,CALN;;AAAA;AAKlBC,2CALkB;AAWdC,qCAXc,GAWF,8CAAeD,gBAAgBV,MAA/B,CAXE;;AAAA,gCAYbW,SAZa;AAAA;AAAA;AAAA;;AAad;AACMC,yCAdQ,GAcQF,gBAAgBG,KAAhB,EAdR;AAAA;AAAA,mCAeOnB,6BAA6BC,MAA7B,EAAqCiB,cAAcZ,MAAnD,EAA2DY,aAA3D,CAfP;;AAAA;AAeRE,kCAfQ;AAAA,8DAgBPA,MAhBO;;AAAA;AAAA;AAAA,mCAkBW,uCAAQJ,eAAR,CAlBX;;AAAA;AAkBlBA,4CAAgBT,IAlBE;AAAA,8DAoBXS,eApBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtB;;AAAA;AAAA;AAAA;AAAA;;AAFiB,CAArB;;kBA2BeR,Y","file":"FetchRequest.js","sourcesContent":["import {getJSON, validateStatus} from '../UfpMiddlewareHelperUtils'\r\n\r\nconst createAxiosLikeErrorResponse = async(config, code, response) => {\r\n    var err = new Error('Request failed with status code ' + response.status)\r\n    err.config = config\r\n    if (code) {\r\n        err.code = code\r\n    }\r\n    err.response = response\r\n    err.response.data = await getJSON(response)\r\n    return err\r\n}\r\n\r\nconst FetchRequest = {\r\n\r\n    ufpMiddlewareRequest: async(config) => {\r\n        // console.log('ufpMiddlewareRequest', JSON.parse(JSON.stringify(config)))\r\n\r\n        var requestResponse\r\n\r\n        requestResponse = await fetch(config.fetchUrl, {\r\n            method: config.method,\r\n            body: config.data,\r\n            credentials: config.credentials,\r\n            headers: config.headers || {}\r\n        })\r\n        var isResolve = validateStatus(requestResponse.status)\r\n        if (!isResolve) {\r\n            // in case of error retrieve content this way\r\n            const responseClone = requestResponse.clone()\r\n            const result = await createAxiosLikeErrorResponse(config, responseClone.status, responseClone)\r\n            return result\r\n        }\r\n        requestResponse.data = await getJSON(requestResponse)\r\n\r\n        return requestResponse\r\n    }\r\n\r\n}\r\n\r\nexport default FetchRequest\r\n"]}