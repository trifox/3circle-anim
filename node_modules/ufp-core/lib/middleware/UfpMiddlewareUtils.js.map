{"version":3,"sources":["../../src/middleware/UfpMiddlewareUtils.js"],"names":["ReactPropTypesCheck","PropTypesCheck","getJSON","isEmptyObject","errorToObject","validateStatus","mergeArrayOfObjects","createAxiosLikeErrorResponse","addToArrayIfNotExist","createConfigDefault","infoLogger","ufpMiddlewarePrepareConfig","ufpAction","ufpDefinition","ufpData","url","method","config","timeout","body","data","urlParams","queryParams","Object","keys","map","item","join","replaceTemplateVar","validateResultHandlerResult","handlerResultArray","successCount","reduce","curr","obj","success","retryCount","retry","handledCount","handled","additionalPayload","uniteActionResultTypes","ufpTypes","actionConstants","target","REQUEST","SUCCESS","FAILURE","END","i","undefined","Array","isArray","element","wrapDispatcher","dispatch","action","type","payload","handleResultHandlers","handlerArray","resultData","ufpErrorHandlerResultPromiseArray","handlerObject","matcher","push","handler","Promise","all","result","handlePreHandlers","length","break","previousPromise","currentItem","then","previousResult","resolve","ufpMiddlewareRequest","fetch","credentials","headers","requestResponse","isResolve","status","responseClone","clone"],"mappings":"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","file":"UfpMiddlewareUtils.js","sourcesContent":["import queryParams from './QueryParams'\nimport {UfpMiddlewareResulthandlerMoreThenOneSuccessError} from './Errors'\nimport UfpMiddlewareHelperUtils from './UfpMiddlewareHelperUtils'\nimport StringUtils from '../utils/StringUtils'\n\nconst {\n    ReactPropTypesCheck,\n    PropTypesCheck,\n    getJSON,\n    isEmptyObject,\n    errorToObject,\n    validateStatus,\n    mergeArrayOfObjects,\n    createAxiosLikeErrorResponse,\n    addToArrayIfNotExist,\n    createConfigDefault,\n    infoLogger\n}=UfpMiddlewareHelperUtils\n\nconst ufpMiddlewarePrepareConfig = (ufpAction) => {\n    // console.log(' ufpMiddlewarePrepareConfig ', JSON.parse(JSON.stringify(ufpAction)))\n\n    const {ufpDefinition, ufpData} = ufpAction\n    const {url, method} =ufpDefinition\n    const config = {}\n\n    config.method = method\n    config.timeout = 15000\n\n    if (ufpData && ufpData.body) {\n        config.data = ufpData.body\n    }\n    if (ufpData) {\n        const {urlParams, queryParams} = ufpData\n\n        if (queryParams && !isEmptyObject(queryParams)) {\n            config.url = url + '?' + Object.keys(queryParams)\n                                           .map((item) => {\n                                               return item + '=' + queryParams[item]\n                                           })\n                                           .join('&')\n        } else {\n            config.url = url\n        }\n\n        config.url = StringUtils.replaceTemplateVar(config.url, urlParams)\n    } else {\n        config.url = url\n    }\n    // console.log('ufpMiddlewarePrepareConfig ', JSON.parse(JSON.stringify(config)))\n    return config\n}\n\nconst validateResultHandlerResult = (handlerResultArray) => {\n    var successCount = handlerResultArray.reduce((curr, obj) => (obj.success ? curr + 1 : curr), 0)\n    var retryCount = handlerResultArray.reduce((curr, obj) => (obj.retry ? curr + 1 : curr), 0)\n    var handledCount = handlerResultArray.reduce((curr, obj) => (obj.handled ? curr + 1 : curr), 0)\n    var additionalPayload = mergeArrayOfObjects(handlerResultArray, (item) => item.additionalPayload)\n    //\n    //  console.log('UFPMiddleware validateHandlerResult intermediate', successCount, handledCount, retryCount)\n    if (successCount > 1) {\n        //console.log('UFPMiddleware  more than 1 success', successCount)\n        throw new UfpMiddlewareResulthandlerMoreThenOneSuccessError()\n    }\n    // // console.log('handledCount', handledCount, handlerResultArray)\n    return {\n        handled: handledCount > 0,\n        retry: retryCount > 0,\n        success: successCount > 0,\n        additionalPayload\n    }\n}\n\nconst uniteActionResultTypes = (ufpTypes = {}, actionConstants = {}) => {\n    var target = {\n        REQUEST: [],\n        SUCCESS: [],\n        FAILURE: [],\n        END: []\n    }\n    for (var i in target) {\n        if (ufpTypes[i] !== undefined) {\n            if (Array.isArray(ufpTypes[i])) {\n                ufpTypes[i].map((element) => addToArrayIfNotExist(target[i], element))\n            } else {\n                addToArrayIfNotExist(target[i], ufpTypes[i])\n            }\n        }\n        if (actionConstants[i] !== undefined) {\n            if (Array.isArray(actionConstants[i])) {\n                actionConstants[i].map((element) => addToArrayIfNotExist(target[i], element))\n            } else {\n                addToArrayIfNotExist(target[i], actionConstants[i])\n            }\n        }\n    }\n    return target\n}\n/*const checkToCallActionCreators = (dispatch, getState, ufpAction, action, actionType) => {\n if (ufpAction.ufpActionCreators) {\n // //   // console.log('UFPMiddleware calling action creators', ufpAction, actionType)\n var actionCreator = ufpAction.ufpActionCreators[actionType]\n if (Array.isArray(actionCreator)) {\n // call all actioncreators\n for (var i in actionCreator) {\n // call each actioncreator in array individually\n if (typeof actionCreator[i] === 'function') {\n dispatch(actionCreator[i]({\n payload: Object.assign({}, {globalState: getState()}, action.payload),\n dispatch: dispatch\n }))\n }\n }\n } else if (typeof actionCreator === 'function') {\n // //   // console.log('UFPMiddleware calling action creators', ufpAction, actionType)\n // just call single listed creator\n dispatch(actionCreator({\n payload: Object.assign({}, {globalState: getState()}, action.payload),\n dispatch: dispatch\n }))\n }\n }\n }*/\n\nconst wrapDispatcher = (dispatch/*, getState , ufpAction*/) => (action) => {\n    if (Array.isArray(action.type)) {\n        for (var i in action.type) {\n            //checkToCallActionCreators(dispatch, getState, ufpAction, action, action.type[i])\n            // //   // console.log('Dispatching array action', i, action.type[i], action.payload)\n            dispatch({\n                type: action.type[i],\n                payload: action.payload\n            })\n        }\n    } else {\n        //checkToCallActionCreators(dispatch, getState, ufpAction,action, action.type)\n        // //   // console.log('Dispatching normal action ', action)\n        return dispatch(action)\n    }\n}\n\nconst handleResultHandlers = async(handlerArray, resultData) => {\n    const ufpErrorHandlerResultPromiseArray = []\n    handlerArray.map((handlerObject) => {\n        if (handlerObject.matcher(resultData)) {\n            ufpErrorHandlerResultPromiseArray.push(handlerObject.handler(resultData))\n        }\n    })\n    const result = await Promise.all(ufpErrorHandlerResultPromiseArray)\n    return result\n}\n\nconst handlePreHandlers = async(handlerArray, resultData) => {\n    if (handlerArray.length === 0) {\n        return {\n            break: false,\n            handled: false\n        }\n    }\n    var result = await handlerArray.reduce((previousPromise, currentItem) => {\n        return previousPromise.then((previousResult) => {\n            if (!previousResult.handled) {\n                if (currentItem.matcher(resultData)) {\n                    return Promise.resolve(currentItem.handler(resultData))\n                } else {\n                    return Promise.resolve(previousResult)\n                }\n            } else {\n                return Promise.resolve(previousResult)\n            }\n        })\n    }, Promise.resolve({\n        break: false,\n        handled: false\n    }))\n    return result\n}\n\nconst ufpMiddlewareRequest = async(config) => {\n    // console.log('ufpMiddlewareRequest', JSON.parse(JSON.stringify(config)))\n\n    var requestResponse\n\n    requestResponse = await fetch(config.url, {\n        method: config.method,\n        body: config.data,\n        credentials: config.credentials,\n        headers: config.headers || {}\n    })\n    var isResolve = validateStatus(requestResponse.status)\n    if (!isResolve) {\n        // in case of error retrieve content this way\n        const responseClone = requestResponse.clone()\n        const result = await createAxiosLikeErrorResponse(config, responseClone.status, responseClone)\n        return result\n    }\n    requestResponse.data = await getJSON(requestResponse)\n\n    return requestResponse\n}\n\nexport default {\n    ReactPropTypesCheck,\n    PropTypesCheck,\n    isEmptyObject,\n    errorToObject,\n    validateStatus,\n    createConfigDefault,\n    infoLogger,\n    queryParams,\n    ufpMiddlewarePrepareConfig,\n    validateResultHandlerResult,\n    uniteActionResultTypes,\n    wrapDispatcher,\n    handleResultHandlers,\n    handlePreHandlers,\n    ufpMiddlewareRequest\n}\n"]}