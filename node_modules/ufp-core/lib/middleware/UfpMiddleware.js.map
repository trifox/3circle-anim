{"version":3,"sources":["../../src/middleware/UfpMiddleware.js"],"names":["UfpMiddleware","options","getState","dispatch","next","action","dispatchPromise","Promise","resolve","validationErrors","length","validationErr","type","ActionConstants","UFP_ACTION_ERROR","payload","ufpAction","UFP_REQUEST_ACTION","dispatchWrapper","wrapDispatcher","ufpDefinition","ufpPayload","ufpData","ufpResultHandler","ufpPreHandler","ufpTypes","additionalPayload","thePayload","Object","assign","ufpTypesUnited","uniteActionResultTypes","actionConstants","MAX_RETRY_COUNT","maxRetryCount","retry","retryCount","makeRequest","totalSuccess","requestResponse","resultContainerForPreHandler","wixi","dispatchOriginal","globalState","configPrepared","ufpMiddlewarePrepareConfig","allPreHandler","concat","get","preRequestHandling","handlePreHandlers","preHandlerResult","break","createConfig","undefined","config","createConfigDefault","REQUEST","validateResult","debug","infoLogger","ufpMiddlewareRequest","Error","errorToObject","resultContainerForHandler","resultHandler","handleResultHandlers","promiseAll0","validateResultHandlerResult","handled","success","SUCCESS","data","FAILURE","error","END","resultHandlings","genericResultHandler","promiseAll1","console","warn","unhandledResultHandler","promiseAll2","err","err2"],"mappings":"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","file":"UfpMiddleware.js","sourcesContent":["import UFPRequestActions from './UfpRequestActions'\nimport {isUFPAction, validateUFPAction} from './Validation'\nimport {InvalidUFPAction, UfpMiddlewareRequestCancelledError, UfpMiddlewareMaxRetryReachedError} from './Errors'\nimport UFPMiddlewareUtils from './UfpMiddlewareUtils'\nimport UFPMiddlewareConstants from './UfpMiddlewareConstants'\nimport UFPMiddlewareConfiguration from './UfpMiddlewareConfiguration'\n// console.log('UfpMiddleware imported ')\nfunction UfpMiddleware(options = {}) {\n    return ({getState, dispatch}) => {\n        return (next) => async(action) => {\n            if (!isUFPAction(action)) {\n                return next(action)\n            }\n\n            // console.log('UfpMiddleware Ufp Action Detected ', UFPMiddlewareConfiguration, action)\n            const dispatchPromise = new Promise(async(resolve /*, reject */) => {\n                /**\n                 *  Do not process actions without a [UFP_ACTION] property\n                 * Try to dispatch an error request FSA for invalid UFPAction's\n                 */\n                const validationErrors = validateUFPAction(action)\n\n                if (validationErrors.length > 0) {\n                    // console.log('UFP MIDDLEWARE validationErrors', validationErrors)\n                    var validationErr = new InvalidUFPAction(validationErrors[0])\n                    dispatch({\n                        type: UFPMiddlewareConstants.ActionConstants.UFP_ACTION_ERROR,\n                        payload: validationErr\n                    })\n                    resolve(validationErr)\n                } else {\n                    /**\n                     * MEGA BLOCK TODO FIXME REFACTOR\n                     *\n                     * this block is the core middleware functionality rougly:\n                     *\n                     * - prehandling\n                     * - executing\n                     * - posthandling/parsing\n                     * - finalisation\n                     *\n                     */\n\n                        // Parse the validated UFP_REQUEST_ACTION action\n                    const ufpAction = action[UFPRequestActions.UFP_REQUEST_ACTION]\n                    const dispatchWrapper = UFPMiddlewareUtils.wrapDispatcher(dispatch /*, getState, ufpAction*/)\n                    const {\n                        ufpDefinition,\n                        ufpPayload,\n                        ufpData,\n                        ufpResultHandler,\n                        ufpPreHandler,\n                        ufpTypes\n                    } = ufpAction\n                    const additionalPayload = {\n\n                        // getState: getState,\n                        // globalState: getState()\n                    }\n                    const thePayload = Object.assign({}, ufpPayload, additionalPayload)\n                    // Object.assign({}, ufpDefinition.actionConstants || {}, ufpAction.ufpTypes || {})\n                    // join together 2 action type definitions, one from action and one from definition,\n                    // both definitions are handled as array\n                    const ufpTypesUnited = UFPMiddlewareUtils.uniteActionResultTypes(ufpTypes, ufpDefinition.actionConstants)\n                    const MAX_RETRY_COUNT = options.maxRetryCount || 5\n                    var retry = true\n                    var retryCount = 0\n                    var makeRequest = true\n                    var totalSuccess = true\n                    var requestResponse = null\n                    const resultContainerForPreHandler = {\n                        ufpAction: {\n                            wixi: 'buxi',\n                            ufpData,\n                            ufpDefinition,\n                            ufpPayload: thePayload,\n                            ufpResultHandler,\n                            ufpPreHandler,\n                            ufpTypes: ufpTypesUnited\n                        },\n                        ufpDefinition,\n                        dispatch: dispatchWrapper,\n                        dispatchOriginal: dispatch,\n                        getState: getState,\n                        globalState: getState()\n                    }\n                    var configPrepared = UFPMiddlewareUtils.ufpMiddlewarePrepareConfig(ufpAction)\n                    // console.log('UfP types', ufpTypesUnited)\n                    const allPreHandler = ([].concat(ufpPreHandler)).concat(\n                        UFPMiddlewareConfiguration.get().preRequestHandling)\n                    // console.log('ufpPreHandler', allPreHandler, resultContainerForPreHandler)\n                    const preHandlerResult = await UFPMiddlewareUtils.handlePreHandlers(\n                        allPreHandler, resultContainerForPreHandler)\n                    // console.log('preHandlerResult ', preHandlerResult)\n                    var validateResult\n                    makeRequest = !preHandlerResult.break\n                    if (makeRequest) {\n                        var config\n                        // console.log('UFPMiddleware executing: ', retryCount, ufpAction)\n                        if (UFPMiddlewareConfiguration.get().createConfig === undefined ||\n                            typeof UFPMiddlewareConfiguration.get().createConfig !== 'function') {\n                            config = UFPMiddlewareUtils.createConfigDefault(configPrepared)\n                        } else {\n                            config = UFPMiddlewareConfiguration.get().createConfig(configPrepared, ufpAction, getState())\n                        }\n\n                        // console.log('UFP MIDDLEWARE config', config)\n                        dispatchWrapper({\n                            type: ufpTypesUnited.REQUEST,\n                            payload: {\n                                action: action,\n                                config: configPrepared\n                            }\n                        })\n                        dispatchWrapper({\n                            type: 'MIDDLEWARE_REQUEST',\n                            payload: {\n                                action: action,\n                                config: configPrepared\n                            }\n                        })\n                        while (retry && retryCount < MAX_RETRY_COUNT) {\n                            validateResult = undefined\n                            retryCount += 1\n\n                            // Make the API call\n                            if (options.debug) {\n                                UFPMiddlewareUtils.infoLogger('[UFP MIDDLEWARE:] making request', config)\n                            }\n\n                            requestResponse = await UFPMiddlewareUtils.ufpMiddlewareRequest(config)\n\n                            if (options.debug) {\n                                UFPMiddlewareUtils.infoLogger('[UFP MIDDLEWARE:] making request finished',\n                                    (requestResponse instanceof Error) ?\n                                        UFPMiddlewareUtils.errorToObject(requestResponse) : requestResponse)\n                            }\n\n                            const resultContainerForHandler = {\n                                ufpAction: {\n                                    ufpData,\n                                    ufpDefinition,\n                                    ufpPayload: thePayload,\n                                    ufpResultHandler,\n                                    ufpPreHandler,\n                                    ufpTypes: ufpTypesUnited\n                                },\n                                dispatch: dispatchWrapper,\n                                dispatchOriginal: dispatch,\n                                getState: getState,\n                                globalState: getState(),\n                                ufpDefinition,\n                                requestResponse: requestResponse\n                            }\n                            var promiseAll0\n                            var promiseAll1\n\n                            var resultHandler\n                            // console.log('ufpResultHandler', ufpResultHandler, ufpDefinition)\n                            if (ufpResultHandler !== undefined && ufpResultHandler.length > 0) {\n                                resultHandler = ufpResultHandler\n                                // console.log('resultHandler', resultHandler)\n                                promiseAll0 = await UFPMiddlewareUtils.handleResultHandlers(resultHandler, resultContainerForHandler)\n                                // console.log('UFPMiddleware HandlerResult: ', promiseAll0, resultHandler)\n                                try {\n                                    validateResult = UFPMiddlewareUtils.validateResultHandlerResult(promiseAll0)\n                                    // console.log('ResultHandler', validateResult)\n                                    // console.log('UFPMiddleware Aggregated Result : ', validateResult)\n                                    if (validateResult.handled && validateResult.success) {\n                                        dispatchWrapper({\n                                            type: ufpTypesUnited.SUCCESS,\n                                            payload: Object.assign(\n                                                Object.assign({}, {data: requestResponse.data}, ufpAction.ufpPayload),\n                                                {additionalPayload: validateResult.additionalPayload})\n                                        })\n                                    }\n                                }\n                                catch (err) { //UfpMiddlewareResulthandlerMoreThenOneSuccessError\n                                    // console.log('Catched error', err)\n                                    dispatchWrapper({\n                                        type: ufpTypesUnited.FAILURE,\n                                        payload: err,\n                                        error: true\n                                    })\n                                    dispatchWrapper({\n                                        type: ufpTypesUnited.END,\n                                        payload: thePayload\n                                    })\n                                    return resolve(err)\n                                }\n                            }\n                            // console.log('UFPMiddleware validateResult: ', validateResult)\n                            if (!resultHandler || (validateResult && !validateResult.handled)) {\n                                promiseAll1 = await UFPMiddlewareUtils.handleResultHandlers(\n                                    UFPMiddlewareConfiguration.get().resultHandlings.genericResultHandler, resultContainerForHandler)\n                                try {\n                                    // console.log('genericResultHandler', promiseAll1)\n                                    validateResult = UFPMiddlewareUtils.validateResultHandlerResult(promiseAll1)\n\n                                    if (validateResult.handled && validateResult.success) {\n                                        dispatchWrapper({\n                                            type: 'MIDDLEWARE_SUCCESS',\n                                            payload: {\n                                                data: requestResponse.data,\n\n                                                ufpAction: ufpAction,\n                                                config: configPrepared\n                                            }\n                                        })\n                                    }\n                                }\n                                catch (err) { //UfpMiddlewareResulthandlerMoreThenOneSuccessError\n                                    // console.log('Catched error', err)\n                                    dispatchWrapper({\n                                        type: ufpTypesUnited.FAILURE,\n                                        payload: err,\n                                        error: true\n                                    })\n                                    dispatchWrapper({\n                                        type: ufpTypesUnited.END,\n                                        payload: thePayload\n                                    })\n                                    return resolve(err)\n                                }\n                            }\n\n                            // console.log('xxxxx middleware promiseall1', promiseAll1, validateResult)\n                            // check if if request is unhandled\n                            if (!validateResult.handled && !validateResult.success && !validateResult.retry) {\n                                console.warn('UFPMiddleware UNHANDLED RESULT UNSUSESFUL UNRETRY: ')\n                                var promiseAll2\n                                promiseAll2 = await UFPMiddlewareUtils.handleResultHandlers(\n                                    UFPMiddlewareConfiguration.get().resultHandlings.unhandledResultHandler,\n                                    resultContainerForHandler)\n\n                                // console.log('xxxxx middleware promiseall2', promiseAll2)\n                                console.warn('UFPMiddleware UNHANDLED RESULT UNSUSESFUL UNRETRY: ', promiseAll2)\n                                // set validate result to the one returned from unhandledResultHandler\n                                try {\n                                    validateResult = UFPMiddlewareUtils.validateResultHandlerResult(promiseAll2)\n                                    if (validateResult.handled && validateResult.success) {\n                                        dispatchWrapper({\n                                            type: ufpTypesUnited.SUCCESS,\n                                            payload: Object.assign(\n                                                Object.assign({}, {data: requestResponse.data}, ufpAction.ufpPayload),\n                                                {additionalPayload: validateResult.additionalPayload})\n                                        })\n                                    }\n                                }\n                                catch (err) { //UfpMiddlewareResulthandlerMoreThenOneSuccessError\n                                    console.warn('UFPMiddleware UNHANDLED RESULT USUCCESFYK RETRY: ', err)\n                                    dispatchWrapper({\n                                        type: ufpTypesUnited.FAILURE,\n                                        payload: err,\n                                        error: true\n                                    })\n                                    dispatchWrapper({\n                                        type: ufpTypesUnited.END,\n                                        payload: thePayload\n                                    })\n                                    return resolve(err)\n                                }\n\n                                console.warn('UFPMiddleware UNHANDLED RESULT USUCCESFYK RETRY: ', validateResult)\n                            }\n\n                            retry = validateResult.retry\n                            if (!retry && !validateResult.success) {\n                                //  console.log('xxxxx middleware rejectin0')\n                                dispatchWrapper({\n                                    type: ufpTypesUnited.FAILURE,\n                                    payload: Object.assign(\n                                        Object.assign({}, {data: requestResponse.data}, ufpAction.ufpPayload),\n                                        {additionalPayload: validateResult.additionalPayload})\n\n                                })\n                                totalSuccess = false\n                                // console.log('xxxxx middleware rejecting1')\n                                //   reject()\n                                // reject()\n                                //   // // console.log('xxxxx middleware rejecting2')\n                            }\n                            //   // // console.log('xxxxx middleware looping3')\n                        } // end while\n                        if (retryCount === MAX_RETRY_COUNT) {\n                            // console.log('UfpMiddleware Max retry count reached')\n                            var err = new UfpMiddlewareMaxRetryReachedError()\n                            dispatchWrapper({\n                                type: ufpTypesUnited.FAILURE,\n                                payload: err,\n                                error: true\n                            }) //Flux Standard Action , if error is true, the payload SHOULD be an error object.\n                            dispatchWrapper({\n                                type: ufpTypesUnited.END,\n                                payload: thePayload\n                            })\n                            return resolve(err)\n                        } else if (totalSuccess) {\n                            resolve(requestResponse) //resolve for success\n                        } else {\n                            resolve(requestResponse) //resolve when handler say its failure\n                        }\n                    } else { // end if(makeRequest)\n                        const err2 = new UfpMiddlewareRequestCancelledError()\n                        // console.log('UfpMiddleware Request Cancelled')\n                        dispatchWrapper({\n                            type: ufpTypesUnited.FAILURE,\n                            payload: err2,\n                            error: true\n                        }) //Flux Standard Action, if error is true, the payload SHOULD be an error object.\n                        resolve(err2)\n                        //console.log('after resolve')\n                    }\n                    //console.log('xxxxx middleware looping4', ufpTypesUnited.END)\n                    dispatchWrapper({\n                        type: ufpTypesUnited.END,\n                        payload: {\n                            ufpAction: ufpAction,\n                            config: configPrepared\n                        }\n                    })\n                    // // // console.log('xxxxx middleware end5')\n                    // console.warn('UFPMiddleware END finish: ')\n                }\n            })\n            // // // console.log('MIDDLEWARE PROIMISE IS ', action, dispatchPromise)\n            //return next(() => dispatchPromise)\n            return dispatchPromise\n        }\n    }\n}\nexport default UfpMiddleware\n"]}