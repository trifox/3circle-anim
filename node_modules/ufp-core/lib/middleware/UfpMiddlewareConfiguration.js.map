{"version":3,"sources":["../../src/middleware/UfpMiddlewareConfiguration.js"],"names":["UFPMiddlewareConfigurationX","resultHandlings","genericResultHandler","unhandledResultHandler","preRequestHandling","createConfig","undefined","UFPHandlerPropTypeDefinition","shape","matcher","func","isRequired","handler","UFPHandlerPropTypeDefinitionArray","input","arrayOf","UFPHandlerPropTypeDefinitionObject","register","array","handlers","Array","isArray","PropTypesCheck","map","push","Error","setCreateConfig","registerResultHandler","registerPreHandler","registerUnhandledHandler","get"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,8BAA8B;AAChCC,qBAAiB;AACbC,8BAAsB,EADT;AAEbC,gCAAwB;AAFX,KADe;AAKhCC,wBAAoB,EALY;AAMhCC,kBAAcC;AANkB,CAApC;;AASA,IAAMC,+BACF,oBAAUC,KAAV,CAAgB;AACZC,aAAS,oBAAUC,IAAV,CAAeC,UADZ;AAEZC,aAAS,oBAAUF,IAAV,CAAeC;AAFZ,CAAhB,CADJ;;AAMA,IAAME,oCAAoC;AACtCC,WAAO,oBAAUC,OAAV,CAAkBR,4BAAlB,EAAgDI;AADjB,CAA1C;AAGA,IAAMK,qCAAqC;AACvCF,WAAOP,6BAA6BI;AADG,CAA3C;;AAIA,IAAMM,WAAW,SAAXA,QAAW,CAACC,KAAD;AAAA,WAAW,UAACC,QAAD,EAAc;AACtC;;AAEA,YAAIC,MAAMC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AACzB,gBAAI,6BAAmBG,cAAnB,CAAkC,EAACR,OAAOK,QAAR,EAAlC,EAAqDN,iCAArD,CAAJ,EAA6F;AACzFM,yBAASI,GAAT,CAAa,UAACX,OAAD,EAAa;AACtBM,0BAAMM,IAAN,CAAWZ,OAAX;AACH,iBAFD;AAGH,aAJD,MAIO;AACH,sBAAM,IAAIa,KAAJ,CAAU,qFAAV,CAAN;AACH;AACJ,SARD,MAQO;AACH,gBAAI,6BAAmBH,cAAnB,CAAkC,EAACR,OAAOK,QAAR,EAAlC,EAAqDH,kCAArD,CAAJ,EAA8F;AAC1FE,sBAAMM,IAAN,CAAWL,QAAX;AACH,aAFD,MAEO;AACH,sBAAM,IAAIM,KAAJ,CAAU,qFAAV,CAAN;AACH;AACJ;AACJ,KAlBgB;AAAA,CAAjB;;AAoBA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACrB,YAAD,EAAkB;AACtCL,gCAA4BK,YAA5B,GAA2CA,YAA3C;AACH,CAFD;;AAIA,IAAMsB,wBAAwBV,SAASjB,4BAA4BC,eAA5B,CAA4CC,oBAArD,CAA9B;AACA,IAAM0B,qBAAqBX,SAASjB,4BAA4BI,kBAArC,CAA3B;AACA,IAAMyB,2BAA2BZ,SAASjB,4BAA4BC,eAA5B,CAA4CE,sBAArD,CAAjC;AACA;;kBAEe;AACX2B,SAAK;AAAA,eAAM9B,2BAAN;AAAA,KADM;AAEX2B,gDAFW;AAGXC,0CAHW;AAIXC,sDAJW;AAKXH;AALW,C","file":"UfpMiddlewareConfiguration.js","sourcesContent":["import UfpMiddlewareUtils from './UfpMiddlewareUtils'\nimport PropTypes from 'prop-types'\n\nconst UFPMiddlewareConfigurationX = {\n    resultHandlings: {\n        genericResultHandler: [],\n        unhandledResultHandler: []\n    },\n    preRequestHandling: [],\n    createConfig: undefined\n}\n\nconst UFPHandlerPropTypeDefinition =\n    PropTypes.shape({\n        matcher: PropTypes.func.isRequired,\n        handler: PropTypes.func.isRequired\n    })\n\nconst UFPHandlerPropTypeDefinitionArray = {\n    input: PropTypes.arrayOf(UFPHandlerPropTypeDefinition).isRequired\n}\nconst UFPHandlerPropTypeDefinitionObject = {\n    input: UFPHandlerPropTypeDefinition.isRequired\n}\n\nconst register = (array) => (handlers) => {\n    // console.log('UfpMiddlewareUtils', UfpMiddlewareUtils)\n\n    if (Array.isArray(handlers)) {\n        if (UfpMiddlewareUtils.PropTypesCheck({input: handlers}, UFPHandlerPropTypeDefinitionArray)) {\n            handlers.map((handler) => {\n                array.push(handler)\n            })\n        } else {\n            throw new Error('UFP ResultHandler or Prehandler Objects need to have a matcher and handler function')\n        }\n    } else {\n        if (UfpMiddlewareUtils.PropTypesCheck({input: handlers}, UFPHandlerPropTypeDefinitionObject)) {\n            array.push(handlers)\n        } else {\n            throw new Error('UFP ResultHandler or Prehandler Objects need to have a matcher and handler function')\n        }\n    }\n}\n\nconst setCreateConfig = (createConfig) => {\n    UFPMiddlewareConfigurationX.createConfig = createConfig\n}\n\nconst registerResultHandler = register(UFPMiddlewareConfigurationX.resultHandlings.genericResultHandler)\nconst registerPreHandler = register(UFPMiddlewareConfigurationX.preRequestHandling)\nconst registerUnhandledHandler = register(UFPMiddlewareConfigurationX.resultHandlings.unhandledResultHandler)\n//UFPMiddlewareConfigurationX.resultHandlings.unhandledResultHandler.push(UFPResponseHandler)\n\nexport default {\n    get: () => UFPMiddlewareConfigurationX,\n    registerResultHandler,\n    registerPreHandler,\n    registerUnhandledHandler,\n    setCreateConfig\n}\n"]}