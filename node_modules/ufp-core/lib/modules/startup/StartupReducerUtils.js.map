{"version":3,"sources":["../../../src/modules/startup/StartupReducerUtils.js"],"names":["LoadingStateEnum","getInitialStatus","StartupStageDefinition","totalSteps","i","stage","Object","keys","map","result","currentStageIndex","appInitialised","loadingState","UNINITIALISED","stagePercentage","totalPercentage","stepPercentage","totalStages","length","totalFinishedSteps","getInitialStageStatus","obj","sort","StartupStageDefinitionName","index","successCount","failureCount","getInitialStepStatus","j","current","name","getInitialState","status","stageStatus","stepStatus","stageDefinition","updateStatus","state","totalCount","$set","Math","round","stepReducer","action","undefined","stageKeys","currentStage","some","stepDef","type","actionNameSuccess","SUCCESS","actionNameFailure","FAILURE","required"],"mappings":"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","file":"StartupReducerUtils.js","sourcesContent":["import StartupConstants from './StartupConstants'\nimport update from 'react-addons-update'\n\nvar LoadingStateEnum = StartupConstants.LoadingStateEnum\n\nconst getInitialStatus = (StartupStageDefinition) => {\n    // calculate total steps by counting through the definition\n    var totalSteps = 0\n    // good ole iterate iterate but no external lib used,\n    // todo: fixme: provide Object.reduce() helper method\n    for (var i in StartupStageDefinition) {\n        var stage = StartupStageDefinition[i]\n        Object.keys(stage)\n            .map(() => {\n                totalSteps++\n            })\n    }\n    var result = {\n        currentStageIndex: -1,\n        appInitialised: false,\n        loadingState: LoadingStateEnum.UNINITIALISED,\n        stagePercentage: 0,\n        totalPercentage: 0,\n        stepPercentage: 0,\n        totalStages: Object.keys(StartupStageDefinition).length,\n        totalSteps: totalSteps,\n        totalFinishedSteps: 0\n    }\n    return result\n}\n\nconst getInitialStageStatus = (StartupStageDefinition) => {\n    var obj = {}\n    Object.keys(StartupStageDefinition)\n        .sort()\n        .map((StartupStageDefinitionName, index) => {\n            var stage = StartupStageDefinition[StartupStageDefinitionName]\n            obj[index] = {\n                totalSteps: stage.length,\n                successCount: 0,\n                failureCount: 0\n            }\n        })\n    return obj\n}\n\nconst getInitialStepStatus = (StartupStageDefinition) => {\n    // // // console.log('StartupReducer creating ', Object.assign({},\n    // StartupStageDefinition))\n    var result = {}\n    for (var i in StartupStageDefinition) {\n        var stage = StartupStageDefinition[i]\n\n        //   // // console.log('StartupReducer Creating initialstate startup2:', stage)\n\n        for (var j in stage) {\n            var current = stage[j]\n            result[current.name] = LoadingStateEnum.UNINITIALISED\n        }\n    }\n\n    // // // console.log('StartupReducer Creating initialstate startup4:', result)\n    return result\n}\n\nconst getInitialState = (StartupStageDefinition) => {\n    return {\n        status: getInitialStatus(StartupStageDefinition),\n        stageStatus: getInitialStageStatus(StartupStageDefinition),\n        stepStatus: getInitialStepStatus(StartupStageDefinition),\n        stageDefinition: StartupStageDefinition\n    }\n}\n\nconst updateStatus = (state) => {\n    var currentStageIndex = state.status.currentStageIndex\n    var totalCount = state.stageStatus[currentStageIndex].totalSteps\n    var successCount = state.stageStatus[currentStageIndex].successCount\n    //var failureCount=state.stageStatus[currentStageIndex].failureCount\n    //console.log('totalcount',totalCount, failureCount, successCount)\n\n    if (totalCount === successCount) {\n        // set next stage\n        state = update(state, {status: {stagePercentage: {$set: 100}}})\n        //epic will start next stage or report finish\n        // console.log('StartupReducer Stage finished ', state)\n    } else {\n        // if stage is not finished update percentage for current stage\n        state = update(state, {status: {stagePercentage: {$set: Math.round((successCount / totalCount) * 100.0)}}})\n\n        // console.log('StartupReducer Stage not finished ', currentStage, state)\n    }\n\n    // and update total percentage accordingly\n    var totalPercentage = Math.round(((currentStageIndex) / state.status.totalStages) * 100)\n    // // // console.log('StartupReducer actualizing percentages stage1 ', state.status.stagePercentage)\n    //  // // console.log('StartupReducer actualizing percentages total2 ', totalPercentage)\n    //console.log('StartupReducer actualizing percentages total3', totalPercentage +\n    // ((state.status.stagePercentage / state.status.totalStages) * 0.01) * 100.0)\n    state = update(state, {\n        status: {\n            totalPercentage: {$set: totalPercentage + (((state.status.stagePercentage / state.status.totalStages) * 0.01) * 100.0)}\n        }\n    })\n    state = update(state, {\n        status: {\n            stepPercentage: {$set: (state.status.totalFinishedSteps / state.status.totalSteps) * 100.0}\n        }\n    })\n\n    return state\n}\n\nconst stepReducer = (state, action) => {\n    if (state === undefined || !state.status || state.status.currentStageIndex === -1) {\n        return state\n    }\n\n    // console.log('Step Reducer Called', state, action)\n\n    var currentStageIndex = state.status.currentStageIndex\n    var stageKeys = Object.keys(state.stageDefinition)\n        .sort()\n    //  // // console.log('StartupReducer ', currentStageIndex, stageKeys)\n    // marker flag if any of the registered actions are incoming (dont update state otherwise)\n    var currentStage = state.stageDefinition[stageKeys[currentStageIndex]]\n\n    // console.log('Step Reducer Called Current Stage is', currentStage)\n\n    currentStage.some((stepDef) => {\n        // // console.log('StartupReducer checking', stepDef)\n        // // console.log('StartupReducer checking', action.type, stepDef.actionNameSuccess)\n        // // console.log('StartupReducer checking', action.type === stepDef.actionNameSuccess)\n        if (action.type === stepDef.actionNameSuccess) {\n            state = update(state, {\n                stepStatus: {\n                    [stepDef.name]: {$set: LoadingStateEnum.SUCCESS}\n                }\n            })\n            // increase step for every success\n            state = update(state, {\n                status: {\n                    totalFinishedSteps: {$set: state.status.totalFinishedSteps + 1}\n                }\n            })\n            //update count in stageStatus\n            state = update(state, {\n                stageStatus: {\n                    [currentStageIndex]: {successCount: {$set: state.stageStatus[currentStageIndex].successCount + 1}}\n                }\n            })\n            state = updateStatus(state)\n            // console.log('StartupReducer success', stepDef)\n            return true //breaks the execution\n        } else if (action.type === stepDef.actionNameFailure) {\n            state = update(state, {\n                stepStatus: {\n                    [stepDef.name]: {$set: LoadingStateEnum.FAILURE}\n                }\n            })\n            //update count in stageStatus\n            if (stepDef.required === true) {\n                state = update(state, {\n                    stageStatus: {\n                        [currentStageIndex]: {failureCount: {$set: state.stageStatus[currentStageIndex].failureCount + 1}}\n                    }\n                })\n            } else {\n                state = update(state, {\n                    status: {\n                        totalFinishedSteps: {$set: state.status.totalFinishedSteps + 1}\n                    }\n                })\n                state = update(state, {\n                    stageStatus: {\n                        [currentStageIndex]: {successCount: {$set: state.stageStatus[currentStageIndex].successCount + 1}}\n                    }\n                })\n            }\n\n            state = updateStatus(state)\n            // console.log('StartupReducer failed', stepDef)\n            return true //breaks the execution\n        }\n        return false //continue the execution\n    })\n    return state\n}\n\nexport default {\n    updateStatus,\n    getInitialState,\n    getInitialStepStatus,\n    getInitialStageStatus,\n    stepReducer\n}\n"]}