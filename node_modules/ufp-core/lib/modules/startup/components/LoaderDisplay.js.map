{"version":3,"sources":["../../../../src/modules/startup/components/LoaderDisplay.jsx"],"names":["LoaderDisplay","props","appInitialized","appComponent","Component","loaderComponent","propTypes","any","isRequired","bool","stagePercentage","number","stepPercentage","totalPercentage","defaultProps","mapStateToProps","state","AppInitialisedSelector","TotalPercentageSelector","StagePercentageSelector","StepPercentageSelector","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;IAEaA,a,WAAAA,a;;;;;;;;;;iCAiBA;AACL,gBAAI,KAAKC,KAAL,CAAWC,cAAf,EAA+B;AAC3B,uBAAQ,KAAKD,KAAL,CAAWE,YAAnB;AAEH,aAHD,MAGO;AACH,oBAAMC,cAAY,KAAKH,KAAL,CAAWI,eAA7B;AACA,uBAAQ,8BAAC,WAAD,EAAe,KAAKJ,KAApB,CAAR;AAEH;AACJ;;;;;AA1BQD,a,CAEFM,S,GAAY;AACfH,kBAAc,oBAAUI,GAAV,CAAcC,UADb;AAEfN,oBAAgB,oBAAUO,IAAV,CAAeD,UAFhB;AAGfH,qBAAiB,oBAAUE,GAAV,CAAcC,UAHhB;AAIfE,qBAAiB,oBAAUC,MAAV,CAAiBH,UAJnB;AAKfI,oBAAgB,oBAAUD,MAAV,CAAiBH,UALlB;AAMfK,qBAAiB,oBAAUF,MAAV,CAAiBH;AANnB,C;AAFVR,a,CAWFc,Y,GAAe;;AAElBT;;AAFkB,C;;;AAmB1B,IAAMU,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD;AAAA,WAAY;AAChCd,wBAAgB,2BAAiBe,sBAAjB,CAAwCD,KAAxC,CADgB;AAEhCH,yBAAiB,2BAAiBK,uBAAjB,CAAyCF,KAAzC,CAFe;AAGhCN,yBAAiB,2BAAiBS,uBAAjB,CAAyCH,KAAzC,CAHe;AAIhCJ,wBAAgB,2BAAiBQ,sBAAjB,CAAwCJ,KAAxC;AAJgB,KAAZ;AAAA,CAAxB;AAMA,IAAMK,qBAAqB,EAA3B;kBACe,yBAAQN,eAAR,EAAyBM,kBAAzB,EAA6CrB,aAA7C,C","file":"LoaderDisplay.js","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport StartupSelectors from '../StartupSelectors'\nimport DefaultLoaderView from './DefaultLoaderView'\n\nexport class LoaderDisplay extends Component {\n\n    static propTypes = {\n        appComponent: PropTypes.any.isRequired,\n        appInitialized: PropTypes.bool.isRequired,\n        loaderComponent: PropTypes.any.isRequired,\n        stagePercentage: PropTypes.number.isRequired,\n        stepPercentage: PropTypes.number.isRequired,\n        totalPercentage: PropTypes.number.isRequired\n    }\n\n    static defaultProps = {\n\n        loaderComponent: DefaultLoaderView\n\n    }\n\n    render() {\n        if (this.props.appInitialized) {\n            return (this.props.appComponent\n            )\n        } else {\n            const Component = this.props.loaderComponent\n            return (<Component {...this.props} />\n            )\n        }\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    appInitialized: StartupSelectors.AppInitialisedSelector(state),\n    totalPercentage: StartupSelectors.TotalPercentageSelector(state),\n    stagePercentage: StartupSelectors.StagePercentageSelector(state),\n    stepPercentage: StartupSelectors.StepPercentageSelector(state)\n})\nconst mapDispatchToProps = {}\nexport default connect(mapStateToProps, mapDispatchToProps)(LoaderDisplay)\n"]}