'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _ConfigConstants = require('./ConfigConstants');

var _ConfigConstants2 = _interopRequireDefault(_ConfigConstants);

var _reactAddonsUpdate = require('react-addons-update');

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

var _ObjectUtils = require('../../utils/ObjectUtils');

var _ObjectUtils2 = _interopRequireDefault(_ObjectUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _defineProperty3.default)({}, _ConfigConstants2.default.ACTION_NAMES.SET_CONFIG_VALUE, function (state, action) {
    // console.log('Config Reducer Setting config value', action.payload)

    var updater = _ObjectUtils2.default.createUpdate(state, 'data.' + action.payload.area + '.' + action.payload.key, action.payload.value);

    // console.log('yyyyyyyyyyCurrent state is ', JSON.stringify(state))
    // console.log('yyyyyyyyyyUpdate would be then ', JSON.stringify(updater))
    var result = (0, _reactAddonsUpdate2.default)(state, updater);
    return result;
    // //initialise main data container
    // if (state.data === undefined) {
    //     state = update(state, {
    //         data: {$set: {}}
    //     })
    // }
    // //initialise area data container
    // if (state.data[action.payload.area] === undefined) {
    //     state = update(state, {
    //         data: {[action.payload.area]: {$set: {}}}
    //     })
    // }
    //
    // console.log('Config Reducer Setting config value', action.payload)
    // console.log('Config Reducer Setting config value', action.payload)
    // console.log('Config Reducer Setting config value', action.payload)
    // console.log('Config Reducer Setting config value', action.payload)
    // // and set final value
    // return update(state, {
    //     data: {
    //         [action.payload.area]: {
    //             [action.payload.key]: {$set: action.payload.value}
    //         }
    //     }
    // })
});
//# sourceMappingURL=ConfigActionHandlers.js.map