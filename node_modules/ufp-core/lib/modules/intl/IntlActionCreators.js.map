{"version":3,"sources":["../../../src/modules/intl/IntlActionCreators.js"],"names":["setActiveLanguages","languages","dispatch","type","SET_LANGUAGES","payload","setMessages","lang","messages","UPDATE_MESSAGES","appendMessages","setLanguage","getState","console","log","SET_LANGUAGE_REQUEST","initSetLanguage"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,qBAAqB,SAArBA,kBAAqB;AAAA,QAACC,SAAD,uEAAa,EAAb;AAAA,WAAoB,UAACC,QAAD;AAAA,eAAcA,SAAS;AAClEC,kBAAM,wBAAcC,aAD8C;AAElEC,qBAAS;AACLJ;AADK;AAFyD,SAAT,CAAd;AAAA,KAApB;AAAA,CAA3B;;AAOA;;;;;;AAMA,IAAMK,cAAc,SAAdA,WAAc;AAAA,QAChBC,IADgB,QAChBA,IADgB;AAAA,QAEhBC,QAFgB,QAEhBA,QAFgB;AAAA,WAGb;AACHL,cAAM,wBAAcM,eADjB;AAEHJ,iBAAS;AACLE,sBADK;AAELC;AAFK;AAFN,KAHa;AAAA,CAApB;;AAWA;;;;;;AAMA,IAAME,iBAAiB,SAAjBA,cAAiB;AAAA,QACnBH,IADmB,SACnBA,IADmB;AAAA,QAEnBC,QAFmB,SAEnBA,QAFmB;AAAA,WAGhB;AACHL,cAAM,wBAAcM,eADjB;AAEHJ,iBAAS;AACLE,sBADK;AAELC;AAFK;AAFN,KAHgB;AAAA,CAAvB;;AAWA,IAAMG,cAAc,SAAdA,WAAc,CAACJ,IAAD;AAAA,WAAU,UAACL,QAAD,EAAWU,QAAX,EAAwB;AAClDC,gBAAQC,GAAR,CAAY,qBAAZ,EAAmCZ,QAAnC,EAA6CU,QAA7C;AACA;;AAEJ;AACIV,iBAAS;AACLC,kBAAM,wBAAcY,oBADf;AAELV,qBAAS,EAACE,MAAMA,IAAP;AAFJ,SAAT;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAlCmB;AAAA,CAApB;;AAoCA,IAAMS,kBAAkB,SAAlBA,eAAkB;AAAA,WAAM,UAACd,QAAD,EAAc;AACxC;AACJ;;AAEA;;AAEIA,iBAASS,YAAY,IAAZ,CAAT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAjBuB;AAAA,CAAxB;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBAEe;AACXL,4BADW;AAEXI,kCAFW;AAGXV,0CAHW;AAIXgB,oCAJW;AAKXL;AALW,C","file":"IntlActionCreators.js","sourcesContent":["import IntlConstants from './IntlConstants'\n\nconst setActiveLanguages = (languages = []) => (dispatch) => dispatch({\n    type: IntlConstants.SET_LANGUAGES,\n    payload: {\n        languages\n    }\n})\n\n/**\n * set messages sets all translations for a language, removing its current values\n * config for a language\n * @param lang\n * @param messages\n */\nconst setMessages = ({\n    lang,\n    messages\n}) => ({\n    type: IntlConstants.UPDATE_MESSAGES,\n    payload: {\n        lang,\n        messages\n    }\n})\n\n/**\n * append messages to existing translations\n * config for a language\n * @param lang\n * @param messages\n */\nconst appendMessages = ({\n    lang,\n    messages\n}) => ({\n    type: IntlConstants.UPDATE_MESSAGES,\n    payload: {\n        lang,\n        messages\n    }\n})\n\nconst setLanguage = (lang) => (dispatch, getState) => {\n    console.log('SetLanguage called ', dispatch, getState)\n    // console.log('SetLanguage called ', getState())\n\n//    if (IntlSelectors.AllMessagesSelector(getState())[lang]===undefined) {\n    dispatch({\n        type: IntlConstants.SET_LANGUAGE_REQUEST,\n        payload: {lang: lang}\n    })\n    // return Promise.resolve(dispatch(loadMessages(lang)))\n    //               .then(() => {\n    //                   dispatch({\n    //                       type: IntlConstants.SET_LANGUAGE_SUCCESS,\n    //                       payload: {lang: lang}\n    //                   })\n    //                   return true\n    //               })\n    //               .catch((e) => {\n    //                   dispatch({\n    //                       type: IntlConstants.SET_LANGUAGE_FAILURE,\n    //                       payload: {\n    //\n    //                           error: e\n    //\n    //                       }\n    //                   })\n    //                   //        return Promise.reject(false)\n    //               })\n    // } else {\n    //     dispatch({\n    //         type: IntlConstants.SET_LANGUAGE,\n    //         payload: {lang: lang}\n    //     })\n    // }\n}\n\nconst initSetLanguage = () => (dispatch) => {\n    // console.log('UFP Intl Setting Language', getState().apiConfig)\n//    IntlSelectors.CurrentLanguageSelector(getState())\n\n//    getConfigValue(getState(),{area:'intl',key:'defaultLanguage',IntlConstants.DEFAULT_LANGUAGE)\n\n    dispatch(setLanguage('en'))\n\n    // var promise = dispatch(\n    //     setLanguage(getState().apiConfig.defaultLanguage)\n    // )\n    // dispatch({\n    //     types: IntlConstants.SET_INIT_LANGUAGE.ARRAY,\n    //     payload: {\n    //         response: promise\n    //     }\n    // })\n}\n//\n// const loadMessages = (lang) => (dispatch) => {\n//     console.log('Load Messages 2', lang)\n//     // var loadKey = 'loadMessages' + Date.now()\n//     // var promise = Api.loadLocalLangFile(lang).then(function(response) {\n//\n//     var obj9 = {\n//         ufpDefinition: ApiDefinitionNew.getUfpLangFile,\n//         ufpData: {\n//             urlParams: {\n//                 lang: lang,\n//                 tag: 'admin'\n//             }\n//         },\n//         ufpTypes: IntlConstants.LOAD_LANGUAGE_FILES,\n//         ufpActionCreators: {\n//             [IntlConstants.LOAD_LANGUAGE_FILES.SUCCESS]: (data) => ({\n//                 type: IntlConstants.UPDATE_MESSAGES,\n//                 payload: {\n//                     lang: lang,\n//                     messages: data.payload.data\n//\n//                 }\n//             })\n//         }\n//     }\n\n//\n//     var result = {\n//         [UfpRequestActions.UFP_REQUEST_ACTION]: obj9\n//     }\n//\n//     console.log('Load Messages 3', result)\n//     dispatch(result)\n// }\n\nexport default {\n    setMessages,\n    appendMessages,\n    setActiveLanguages,\n    initSetLanguage,\n    setLanguage\n}\n"]}