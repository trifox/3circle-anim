{"version":3,"sources":["../../../src/modules/intl/IntlActionHandlers.js"],"names":["SET_LANGUAGES","state","action","languages","$set","payload","SET_LANGUAGE_REQUEST","nextLanguage","lang","SET_LANGUAGE","currentLanguage","randomKey","Math","random","setItem","STORAGE_KEY","APPEND_MESSAGES","allMessages","$push","messages","UPDATE_MESSAGES","result","found","map","langid","console","log"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;oGAGK,wBAAcA,a,EAAgB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC9C,WAAO,iCAAOD,KAAP,EAAc;AACjBE,mBAAW,EAACC,MAAMF,OAAOG,OAAP,CAAeF,SAAtB;AADM,KAAd,CAAP;AAGH,C,wDAEA,wBAAcG,oB,EAAuB,UAACL,KAAD,EAAQC,MAAR,EAAmB;AACrD,WAAO,iCAAOD,KAAP,EAAc;AACjBM,sBAAc,EAACH,MAAMF,OAAOG,OAAP,CAAeG,IAAtB;AADG,KAAd,CAAP;AAGH,C,wDACA,wBAAcC,Y,EAAe,UAACR,KAAD,EAAQC,MAAR,EAAmB;AAC7C,QAAIA,OAAOG,OAAP,CAAeG,IAAf,IAAuBP,MAAMS,eAAN,KAA0BR,OAAOG,OAAP,CAAeG,IAApE,EAA0E;AACtE,eAAO,iCAAOP,KAAP,EAAc;AACjBU,uBAAW,EAACP,MAAMQ,KAAKC,MAAL,EAAP,EADM;AAEjBH,6BAAiB,EAACN,MAAMF,OAAOG,OAAP,CAAeG,IAAtB;AAFA,SAAd,CAAP;AAIH;AACD,0BAAYM,OAAZ,CAAoB,wBAAcC,WAAlC,EAA+Cb,OAAOG,OAAP,CAAeG,IAA9D;AACA,WAAOP,KAAP;AACH,C,wDAEA,wBAAce,e,EAAkB,UAACf,KAAD,EAAQC,MAAR,EAAmB;AAChD,WAAO,iCAAOD,KAAP,EAAc;AACjBgB,uDACKf,OAAOG,OAAP,CAAeG,IADpB,EAC2B,EAACU,OAAOhB,OAAOG,OAAP,CAAec,QAAvB,EAD3B,CADiB;AAIjBR,mBAAW,EAACP,MAAMQ,KAAKC,MAAL,EAAP;AAJM,KAAd,CAAP;AAMH,C,wDACA,wBAAcO,e,EAAkB,UAACnB,KAAD,EAAQC,MAAR,EAAmB;AAAA,0BACzBA,OAAOG,OADkB;AAAA,QACzCc,QADyC,mBACzCA,QADyC;AAAA,QAC/BX,IAD+B,mBAC/BA,IAD+B;;AAEhD,QAAIa,SAASpB,KAAb;;AAEAoB,aAAS,iCAAOA,MAAP,EAAe;AACpBJ,uDACKT,IADL,EACY,EAACJ,MAAMe,QAAP,EADZ,CADoB;AAIpBR,mBAAW,EAACP,MAAMQ,KAAKC,MAAL,EAAP;AAJS,KAAf,CAAT;;AAOA,QAAIZ,MAAMM,YAAN,KAAuBL,OAAOG,OAAP,CAAeG,IAAtC,IAA8CP,MAAMS,eAAN,KAA0BT,MAAMM,YAAlF,EAAgG;AAC5F;AACA;;AAEAc,iBAAS,iCAAOA,MAAP,EAAe;AACpBX,6BAAiB,EAACN,MAAMF,OAAOG,OAAP,CAAeG,IAAtB;AADG,SAAf,CAAT;;AAIA,YAAIc,QAAQ,KAAZ;AACArB,cAAME,SAAN,CAAgBoB,GAAhB,CAAoB,UAACC,MAAD,EAAY;AAC5B,gBAAIA,WAAWtB,OAAOG,OAAP,CAAeG,IAA9B,EAAoC;AAChCc,wBAAQ,IAAR;AACH;AACJ,SAJD;AAKA,YAAI,CAACA,KAAL,EAAY;AACRD,qBAAS,iCAAOA,MAAP,EAAe,EAAClB,WAAW,EAACe,OAAO,CAAChB,OAAOG,OAAP,CAAeG,IAAhB,CAAR,EAAZ,EAAf,CAAT;AACH;AACJ;;AAEDiB,YAAQC,GAAR,CAAY,wBAAZ,EAAsCL,MAAtC;;AAEA,WAAOA,MAAP;AACH,C","file":"IntlActionHandlers.js","sourcesContent":["import update from 'react-addons-update'\nimport IntlConstants from './IntlConstants'\nimport StorageReal from '../../utils/storage/StorageReal'\n\nexport default {\n    [IntlConstants.SET_LANGUAGES]: (state, action) => {\n        return update(state, {\n            languages: {$set: action.payload.languages}\n        })\n    },\n\n    [IntlConstants.SET_LANGUAGE_REQUEST]: (state, action) => {\n        return update(state, {\n            nextLanguage: {$set: action.payload.lang}\n        })\n    },\n    [IntlConstants.SET_LANGUAGE]: (state, action) => {\n        if (action.payload.lang && state.currentLanguage !== action.payload.lang) {\n            return update(state, {\n                randomKey: {$set: Math.random()},\n                currentLanguage: {$set: action.payload.lang}\n            })\n        }\n        StorageReal.setItem(IntlConstants.STORAGE_KEY, action.payload.lang)\n        return state\n    },\n\n    [IntlConstants.APPEND_MESSAGES]: (state, action) => {\n        return update(state, {\n            allMessages: {\n                [action.payload.lang]: {$push: action.payload.messages}\n            },\n            randomKey: {$set: Math.random()}\n        })\n    },\n    [IntlConstants.UPDATE_MESSAGES]: (state, action) => {\n        const {messages, lang}=action.payload\n        var result = state\n\n        result = update(result, {\n            allMessages: {\n                [lang]: {$set: messages}\n            },\n            randomKey: {$set: Math.random()}\n        })\n\n        if (state.nextLanguage === action.payload.lang && state.currentLanguage !== state.nextLanguage) {\n            // update current language according to next language if it was the desire to load for\n            // active language (which we define as such)\n\n            result = update(result, {\n                currentLanguage: {$set: action.payload.lang}\n            })\n\n            var found = false\n            state.languages.map((langid) => {\n                if (langid === action.payload.lang) {\n                    found = true\n                }\n            })\n            if (!found) {\n                result = update(result, {languages: {$push: [action.payload.lang]}})\n            }\n        }\n\n        console.log('UPDATE MESSAGE result ', result)\n\n        return result\n    }\n\n}\n"]}