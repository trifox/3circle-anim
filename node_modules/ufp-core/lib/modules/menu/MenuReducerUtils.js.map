{"version":3,"sources":["../../../src/modules/menu/MenuReducerUtils.js"],"names":["getInitialState","MenuData","getMenuData","MenuDefinition","getMenuDefinition","DeferedActionsList","MenuActionListReducer","state","action","menuEntryAll","type","undefined","pushedalread","map","menuEntry","actionName","$push","indexOf","i","Array","isArray","actionNames","newLocalState","actionHandler","getState","payload","area","subArea","items","sortAllChildren","$set","$splice"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,GAAM;AACjC;AACA;;AAEA,WAAO;;AAEHC,kBAAU,oCAA0BC,WAA1B,EAFP;AAGHC,wBAAgB,oCAA0BC,iBAA1B,EAHb;AAIHC,4BAAoB;AAJjB,KAAP;AAMH,CAVM;;AAYP,IAAMC,wBAAwB,SAAxBA,qBAAwB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7C;AACA,QAAIC,eAAeF,MAAMJ,cAAN,CAAqBK,OAAOE,IAA5B,CAAnB;AACA;;AAEA,QAAID,iBAAiBE,SAArB,EAAgC;AAC5B,YAAIC,eAAe,EAAnB;AACAH,qBAAaI,GAAb,CAAiB,UAACC,SAAD,EAAe;AAC5B;;AAEA;AACA;AACA;AACA;AACA,gBAAIF,aAAaE,UAAUC,UAAvB,MAAuCJ,SAA3C,EAAsD;AAClDJ,wBAAQ,iCAAOA,KAAP,EAAc,EAACF,oBAAoB,EAACW,OAAO,CAACF,UAAUC,UAAX,CAAR,EAArB,EAAd,CAAR;AACH;AACDH,yBAAaE,UAAUC,UAAvB,IAAqC,IAArC;AACA;AACA;AACH,SAbD;AAcA,eAAOR,KAAP;AACH,KAjBD,MAiBO;AACH;AACA,YAAIA,MAAMF,kBAAN,CAAyBY,OAAzB,CAAiCT,OAAOE,IAAxC,MAAkD,CAAC,CAAvD,EAA0D;AACtD;AACA;AACA,iBAAK,IAAIQ,CAAT,IAAcX,MAAMJ,cAApB,EAAoC;AAChC,oBAAMM,gBAAeF,MAAMJ,cAAN,CAAqBe,CAArB,CAArB;AACA,oBAAIT,kBAAiBE,SAArB,EAAgC;AAC5BF,kCAAaI,GAAb,CAAiB,UAACC,SAAD,EAAe;AACxB,4BAAIA,UAAUC,UAAV,KAAyBP,OAAOE,IAAhC,IACCS,MAAMC,OAAN,CAAcN,UAAUO,WAAxB,KACDP,UAAUO,WAAV,CAAsBJ,OAAtB,CAA8BT,OAAOE,IAArC,MAA+C,CAAC,CAFpD,EAEwD;AACpD;AACA;AACA;AACA;AACA,gCAAIY,gBAAgBR,UAAUS,aAAV,CAAwB;AACxCC,0CAAUhB,OAAOiB,OAAP,CAAeD,QADe;AAExCjB,uCAAOA,MAAMN,QAAN,CAAea,UAAUY,IAAzB,EAA+BZ,UAAUa,OAAzC,EAAkDC,KAFjB;AAGxCpB,wCAAQA;AAHgC,6BAAxB,CAApB;AAKA,gCAAIW,MAAMC,OAAN,CAAcE,aAAd,CAAJ,EAAkC;AAC9BA,8CAAcT,GAAd,CAAkB,UAACC,SAAD,EAAe;AAC7B,gEAAkBe,eAAlB,CAAkCf,SAAlC;AACH,iCAFD;AAGH;AACD;AACA;AACAP,oCAAQ,iCAAOA,KAAP,EAAc;AAClBN,4EACKa,UAAUY,IADf,oCACwBZ,UAAUa,OADlC,EAC4C,EAACC,OAAO,EAACE,MAAMR,aAAP,EAAR,EAD5C;AADkB,6BAAd,CAAR;AAKH;AACJ,qBA1BL;AA4BH;AACJ;AACD;AACA;AACAf,oBAAQ,iCAAOA,KAAP,EAAc;AAClBF,oCAAoB,EAAC0B,SAAS,CAAC,CAACxB,MAAMF,kBAAN,CAAyBY,OAAzB,CAAiCT,OAAOE,IAAxC,CAAD,EAAgD,CAAhD,CAAD,CAAV;AADF,aAAd,CAAR;AAGH;AACD,eAAOH,KAAP;AACH;AACJ,CApED;;kBAsEe;AACXP,oCADW;AAEXM;AAFW,C","file":"MenuReducerUtils.js","sourcesContent":["import update from 'react-addons-update'\nimport MenuConfigurationInternal from './MenuConfigurationInternal'\nimport MenuInternalUtils from './MenuInternalUtils'\n\nexport const getInitialState = () => {\n    // console.log('Initial State Menu called ', MenuConfigurationInternal)\n    // console.log(MenuConfigurationInternal)\n\n    return {\n\n        MenuData: MenuConfigurationInternal.getMenuData(),\n        MenuDefinition: MenuConfigurationInternal.getMenuDefinition(),\n        DeferedActionsList: []\n    }\n}\n\nconst MenuActionListReducer = (state, action) => {\n    // console.log('MenuReducer Called', state, action)\n    var menuEntryAll = state.MenuDefinition[action.type]\n    // console.log('MenuReducer Called menudef entry is ', menuEntryAll)\n\n    if (menuEntryAll !== undefined) {\n        var pushedalread = {}\n        menuEntryAll.map((menuEntry) => {\n            // // console.log('MenuReducer entry found ', menuEntry)\n\n            // if menu registered action is encountered, store the aftermath\n            // action in the action list to be executed after the \"normal\" action\n            // handlers for that action have done their work\n            // this defered actions is then called from the menuactor\n            if (pushedalread[menuEntry.actionName] === undefined) {\n                state = update(state, {DeferedActionsList: {$push: [menuEntry.actionName]}})\n            }\n            pushedalread[menuEntry.actionName] = true\n            // // console.log('MenuReducer new state is', state)\n            // // console.log('MenuReducer new defer is', [menuEntry.actionName])\n        })\n        return state\n    } else {\n        // check if entry is in defer list and call reducer for menu\n        if (state.DeferedActionsList.indexOf(action.type) !== -1) {\n            // // console.log('MenuReducedr action is in defered list, check for menu\n            // reducers and remove entry from defered list')\n            for (var i in state.MenuDefinition) {\n                const menuEntryAll = state.MenuDefinition[i]\n                if (menuEntryAll !== undefined) {\n                    menuEntryAll.map((menuEntry) => {\n                            if (menuEntry.actionName === action.type ||\n                                (Array.isArray(menuEntry.actionNames) &&\n                                menuEntry.actionNames.indexOf(action.type) !== -1)) {\n                                // call menu reducer with its state from this reducer\n                                // // console.log('MenuReducer Called menudef entry is 1', menuEntry)\n                                // // console.log('MenuReducer Called menudef state is 2',\n                                // state.MenuData[menuEntry.area][menuEntry.subArea])\n                                var newLocalState = menuEntry.actionHandler({\n                                    getState: action.payload.getState,\n                                    state: state.MenuData[menuEntry.area][menuEntry.subArea].items,\n                                    action: action\n                                })\n                                if (Array.isArray(newLocalState)) {\n                                    newLocalState.map((menuEntry) => {\n                                        MenuInternalUtils.sortAllChildren(menuEntry)\n                                    })\n                                }\n                                // retrieve the local state for the menu, each menu reducer\n                                // shall just receive its local menu definition\n                                state = update(state, {\n                                    MenuData: {\n                                        [menuEntry.area]: {[menuEntry.subArea]: {items: {$set: newLocalState}}}\n                                    }\n                                })\n                            }\n                        }\n                    )\n                }\n            }\n            // remove defered action from list\n            // // console.log('MenuReducer removing defered action', action)\n            state = update(state, {\n                DeferedActionsList: {$splice: [[state.DeferedActionsList.indexOf(action.type), 1]]}\n            })\n        }\n        return state\n    }\n}\n\nexport default {\n    getInitialState,\n    MenuActionListReducer\n}\n"]}