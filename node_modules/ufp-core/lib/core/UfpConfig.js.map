{"version":3,"sources":["../../src/core/UfpConfig.js"],"names":["config","getConfig","name","configure","data","ThrowParam","Object","assign"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAIA,SAAS,EAAb;;kBAEe;;AAEXC,eAAW,yBAAY;AAAA,YAAVC,IAAU,QAAVA,IAAU;;AACnB;AACA,eAAOF,OAAOE,IAAP,CAAP;AACH,KALU;;AAOXC,eAAW,0BAAuE;AAAA,+BAArEC,IAAqE;AAAA,YAArEA,IAAqE,8BAA9D,kBAAQC,UAAR,CAAmB,oCAAnB,CAA8D;;AAC9E;AACA;AACA;AACAL,iBAASM,OAAOC,MAAP,CAAc,EAAd,EAAkBP,MAAlB,EAA0BI,IAA1B,CAAT;AACH;AAZU,C","file":"UfpConfig.js","sourcesContent":["import JSUtils from '../utils/JSUtils'\r\n\r\nvar config = {}\r\n\r\nexport default {\r\n\r\n    getConfig: ({name}) => {\r\n        // console.log('ufp core config is ', config)\r\n        return config[name]\r\n    },\r\n\r\n    configure: ({data = JSUtils.ThrowParam('data has to be set for configure()')}) => {\r\n        // console.log('ufp core config add ', data)\r\n        // console.log('ufp core config is ', config)\r\n        // merge all incming values with config\r\n        config = Object.assign({}, config, data)\r\n    }\r\n}\r\n"]}