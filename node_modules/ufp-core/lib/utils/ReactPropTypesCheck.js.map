{"version":3,"sources":["../../src/utils/ReactPropTypesCheck.js"],"names":["ReactPropTypesCheck","object","propTypes","_throw","console","warn","propName","hasOwnProperty","error","message","CheckPropTypes","ThrowParam","name","doThrow"],"mappings":"AAAA;;;;;AAKA;;;;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,oDAAsB,SAAtBA,mBAAsB,CAACC,MAAD,EAASC,SAAT,EAAoBC,MAApB,EAA+B;AAC9DC,YAAQC,IAAR,CAAa,yDAAb;AACA,QAAIC,QAAJ;;AAEA,SAAKA,QAAL,IAAiBJ,SAAjB,EAA4B;AACxB,YAAIA,UAAUK,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;AACpC,gBAAIE,QAAQ,8BAAeN,SAAf,EAA0BD,MAA1B,EAAkC,MAAlC,EAA0C,mBAA1C,CAAZ;AACA,gBAAIO,KAAJ,EAAW;AACP,oBAAIL,MAAJ,EAAY;AACR,0BAAMK,KAAN;AACH,iBAFD,MAEO;AACHJ,4BAAQI,KAAR,CAAcA,MAAMC,OAApB;AACH;AACJ;AACJ;AACJ;AACJ,CAhBM;;AAkBP;;;;;;;;;AASO,IAAMC,0CAAiB,SAAjBA,cAAiB,OAKxB;AAAA,2BAJFT,MAIE;AAAA,QAJFA,MAIE,+BAJO,kBAAQU,UAAR,CAAmB,gCAAnB,CAIP;AAAA,8BAHFT,SAGE;AAAA,QAHFA,SAGE,kCAHU,kBAAQS,UAAR,CAAmB,mCAAnB,CAGV;AAAA,yBAFFC,IAEE;AAAA,QAFFA,IAEE,6BAFK,QAEL;AAAA,4BADFC,OACE;AAAA,QADFA,OACE,gCADQ,KACR;;AACF,QAAIP,QAAJ;;AAEA,SAAKA,QAAL,IAAiBJ,SAAjB,EAA4B;AACxB,YAAIA,UAAUK,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;AACpC,gBAAIE,QAAQ,8BAAeN,SAAf,EAA0BD,MAA1B,EAAkC,MAAlC,EAA0CW,IAA1C,CAAZ;AACA,gBAAIJ,KAAJ,EAAW;AACP,oBAAIK,OAAJ,EAAa;AACT,0BAAML,KAAN;AACH,iBAFD,MAEO;AACHJ,4BAAQI,KAAR,CAAcA,MAAMC,OAApB;AACA,2BAAO,KAAP;AACH;AACJ;AACJ;AACJ;AACD,WAAO,IAAP;AACH,CAtBM;;kBAwBQ;AACXT,4CADW;AAEXU;AAFW,C","file":"ReactPropTypesCheck.js","sourcesContent":["/**\n * @param {Object} object to be validated\n * @param {Object} propTypes object with defined prop types\n * @param {Boolean} _throw if set to true, invalid prop types will throw\n */\n'use strict'\nimport checkPropTypes from 'check-prop-types'\nimport JsUtils from './JSUtils'\n\nexport const ReactPropTypesCheck = (object, propTypes, _throw) => {\n    console.warn('ReactPropTypesCheck is deprecated use CheckPropTypes() ')\n    var propName\n\n    for (propName in propTypes) {\n        if (propTypes.hasOwnProperty(propName)) {\n            var error = checkPropTypes(propTypes, object, 'prop', 'UfpPropTypesCheck')\n            if (error) {\n                if (_throw) {\n                    throw error\n                } else {\n                    console.error(error.message)\n                }\n            }\n        }\n    }\n}\n\n/**\n * Executes the ReactPropType for an object,\n * @param object the object to check\n * @param propTypes react proptypes definition\n * @param name the name of the object (for message\n * @param doThrow if true method throws if false method returns true/false\n * @returns {boolean}\n * @constructor\n */\nexport const CheckPropTypes = ({\n    object = JsUtils.ThrowParam('object parameter has to be set'),\n    propTypes = JsUtils.ThrowParam('propTypes parameter has to be set'),\n    name = 'Object',\n    doThrow = false\n}) => {\n    var propName\n\n    for (propName in propTypes) {\n        if (propTypes.hasOwnProperty(propName)) {\n            var error = checkPropTypes(propTypes, object, 'prop', name)\n            if (error) {\n                if (doThrow) {\n                    throw error\n                } else {\n                    console.error(error.message)\n                    return false\n                }\n            }\n        }\n    }\n    return true\n}\n\nexport default {\n    ReactPropTypesCheck,\n    CheckPropTypes\n}\n"]}