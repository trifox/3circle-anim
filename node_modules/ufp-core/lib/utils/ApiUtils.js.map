{"version":3,"sources":["../../src/utils/ApiUtils.js"],"names":["createAsyncResponseActionNames","apiDefinitionPath","REQUEST","toUpperCase","SUCCESS","END","FAILURE","traverseDefinition","obj","callback","path","url","undefined","Object","keys","forEach","key","value","concat","call","createActionConstantsForApiDefinitions","ApiDefinitionsObject","newApiDefinitionsObject","definition","assign","actionConstants","join","toLocaleUpperCase"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;AAMA,IAAMA,iCAAiC,SAAjCA,8BAAiC,CAACC,iBAAD,EAAuB;AAC1D,WAAO;AACHC,iBAASD,kBAAkBE,WAAlB,KAAkC,UADxC;AAEHC,iBAASH,kBAAkBE,WAAlB,KAAkC,UAFxC;AAGHE,aAAKJ,kBAAkBE,WAAlB,KAAkC,MAHpC;AAIHG,iBAASL,kBAAkBE,WAAlB,KAAkC;AAJxC,KAAP;AAMH,CAPD;AAQA,IAAMI,qBAAqB,SAArBA,kBAAqB,CAACC,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AAChD;AACAA,WAAOA,QAAQ,EAAf;AACA,QAAI,QAAOF,GAAP,uDAAOA,GAAP,OAAe,QAAf,IAA2BA,IAAIG,GAAJ,KAAYC,SAA3C,EAAsD;AAClDC,eAAOC,IAAP,CAAYN,GAAZ,EAAiBO,OAAjB,CAAyB,UAACC,GAAD,EAAS;AAC9B,gBAAIC,QAAQT,IAAIQ,GAAJ,CAAZ;AACAT,+BAAmBU,KAAnB,EAA0BR,QAA1B,EAAoCC,KAAKQ,MAAL,CAAYF,GAAZ,CAApC;AACH,SAHD;AAIH,KALD,MAKO;AACHP,iBAASU,IAAT,CAAcX,GAAd,EAAmBE,IAAnB,EAAyBF,GAAzB;AACH;AACJ,CAXD;;AAaA,IAAMY,yCAAyC,SAAzCA,sCAAyC,CAACC,oBAAD,EAA0B;AACrE,QAAIC,0BAA0B,EAA9B;AACAf,uBAAmBc,oBAAnB,EAAyC,UAACX,IAAD,EAAOa,UAAP,EAAsB;AAC3D,6BAAID,uBAAJ,EAA6BZ,IAA7B,EACIG,OAAOW,MAAP,CAAc;AACVC,6BAAiBzB,+BACbU,KAAKgB,IAAL,CAAU,GAAV,EAAeC,iBAAf,EADa;AADP,SAAd,EAGGJ,UAHH,CADJ;AAKH,KAND;AAOA,WAAOD,uBAAP;AACH,CAVD;;kBAYe;AACXF,kFADW;AAEXpB;AAFW,C","file":"ApiUtils.js","sourcesContent":["import {set} from './DeepGetSet'\n/**\n * helper method to create the 3 action names request,success,fail to be used by async middleware\n * @param apiDefinitionPath the prefix for the action names\n * @returns {{REQUEST: string, SUCCESS: string, FAILURE: string, END: string}}\n */\n\nconst createAsyncResponseActionNames = (apiDefinitionPath) => {\n    return {\n        REQUEST: apiDefinitionPath.toUpperCase() + '_REQUEST',\n        SUCCESS: apiDefinitionPath.toUpperCase() + '_SUCCESS',\n        END: apiDefinitionPath.toUpperCase() + '_END',\n        FAILURE: apiDefinitionPath.toUpperCase() + '_FAILURE'\n    }\n}\nconst traverseDefinition = (obj, callback, path) => {\n    // // console.log('traversinng ', obj, path)\n    path = path || []\n    if (typeof obj === 'object' && obj.url === undefined) {\n        Object.keys(obj).forEach((key) => {\n            var value = obj[key]\n            traverseDefinition(value, callback, path.concat(key))\n        })\n    } else {\n        callback.call(obj, path, obj)\n    }\n}\n\nconst createActionConstantsForApiDefinitions = (ApiDefinitionsObject) => {\n    var newApiDefinitionsObject = {}\n    traverseDefinition(ApiDefinitionsObject, (path, definition) => {\n        set(newApiDefinitionsObject, path,\n            Object.assign({\n                actionConstants: createAsyncResponseActionNames(\n                    path.join('_').toLocaleUpperCase())\n            }, definition))\n    })\n    return newApiDefinitionsObject\n}\n\nexport default {\n    createActionConstantsForApiDefinitions,\n    createAsyncResponseActionNames\n}\n"]}