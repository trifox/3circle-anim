{"version":3,"sources":["../../src/utils/ReduxUtils.js"],"names":["identity","t","getNodeFromObject","nodeName","object","i","tempResult","undefined","createLocalSelector","func","state","node","createActionCreator","type","actionCreator","metaCreator","finalActionCreator","action","payload","length","Error","error","meta","createReducer","initialState","handlers","handler","createReducerWithChildReducers","reducers","currentState","createAsyncResponseActionNames","resourceName","REQUEST","toUpperCase","SUCCESS","END","FAIL","ARRAY","bindActionCreatorAndParams","dispatch","params","args"],"mappings":"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","file":"ReduxUtils.js","sourcesContent":["/**\n * identity helper method to for various occasions, where just the input needs to be returned\n * @param t\n * @returns {*}\n */\nconst identity = (t) => {\n    return t\n}\n\n/**\n * retrieves the first particular node from an object with the keyname===nodeName\n * @param nodeName  key name to search for\n * @param object object to search for a key with value nodeName\n * @returns {*}\n */\nconst getNodeFromObject = (nodeName, object) => {\n    // // console.log('Getnode from objewct called ', nodeName, object)\n    for (var i in object) {\n        //   // console.log('Getnode checking ', i, object[i])\n        if (i === nodeName) {\n            //     // console.log('Getnode returning 1', object[i])\n            return object[i]\n        } else if (typeof object[i] === 'object' && object[i] !== null) {\n            var tempResult = getNodeFromObject(nodeName, object[i])\n            if (tempResult !== undefined) {\n                //      // console.log('Getnode returning 2', tempResult)\n                return tempResult\n            }\n        }\n    }\n}\n\n/**\n * the localselector\n * @param nodeName the node to be returned as the local state for the reducer from the main state tree\n */\nconst createLocalSelector = (nodeName, func) => {\n    // // console.log('Creating local selector for node ', nodeName)\n    return (state) => {\n        //   // console.log('called local selector for node called', nodeName)\n        //    // console.log('called local selector for node called local state is', getNodeFromObject(nodeName, state))\n        var node = getNodeFromObject(nodeName, state)\n        if (node !== undefined) {\n            return func(node)\n        } else {\n            //  throw 'StateTree does not contain required node: [' + nodeName + '] check reducer naming'\n            // state tree entry not found assume its allready local\n            return func(state)\n        }\n    }\n}\n\n/**\n *\n * fÃ¼r standard actioncreator 2.ter paramter object oder native type,\n * wird payload zugewiesen - identity wird dann angewendet\n *\n * @param type\n * @param actionCreator\n * @param metaCreator\n * @returns {Function}\n */\nconst createActionCreator = (type, actionCreator, metaCreator) => {\n    const finalActionCreator = typeof actionCreator === 'function' ? actionCreator : identity\n\n    return (...args) => {\n        const action = {\n            type,\n            payload: finalActionCreator(...args)\n        }\n\n        if (args.length === 1 && args[0] instanceof Error) {\n            // Handle FSA errors where the payload is an Error object. Set error.\n            action.error = true\n        }\n\n        if (typeof metaCreator === 'function') {\n            action.meta = metaCreator(...args)\n        }\n\n        return action\n    }\n}\n\n/**\n * creates a reducer from initialstate and action handlers, actions are then mapped through\n * the action handles associative array to obtain the current action handler\n *./\n * @param initialState the initial state of the reducer\n * @param handlers object notated action handlers\n * @returns {reducer} returns the reducer method\n */\nconst createReducer = (initialState, handlers) => {\n    return (state = initialState, action) => {\n        // // console.log('DEBUG 1 REDUCER CALLED')\n        const handler = handlers[action.type]\n        return handler ? handler(state, action) : state\n    }\n}\n/**\n * this helper method is designed to execute actionhandlers from reducers to be combined\n * with the current actionhandlings\n * @param initialState\n * @param handlers\n * @param reducers\n * @returns {reducer}\n */\nconst createReducerWithChildReducers = (initialState, handlers, reducers) => {\n    return (state = initialState, action) => {\n        //  // console.log('createReducerWithChildReducers executing  ', action.type, reducers)\n        var currentState = state\n        // pass through child reducers\n        for (var i in reducers) {\n            //   // console.log('createReducerWithChildReducers calling child reducer  ', reducers[i])\n            currentState = reducers[i](currentState, action)\n        }\n\n        const handler = handlers[action.type]\n        return handler ? handler(currentState, action) : currentState\n    }\n}\n/**\n * helper method to create the 3 action names request,success,fail to be used by async middleware\n * @param resourceName the prefix for the action names\n * @returns {{REQUEST: string, SUCCESS: string, FAIL: string}}\n */\nconst createAsyncResponseActionNames = (resourceName) => {\n    return {\n        REQUEST: resourceName.toUpperCase() + '_REQUEST',\n        SUCCESS: resourceName.toUpperCase() + '_SUCCESS',\n        END: resourceName.toUpperCase() + '_END',\n        FAIL: resourceName.toUpperCase() + '_FAIL',\n        ARRAY: [resourceName.toUpperCase() + '_REQUEST', resourceName.toUpperCase() + '_SUCCESS', resourceName.toUpperCase() + '_FAIL']\n    }\n}\n/**\n * his helper method creates a action with parameter already bound\n * @param actionCreator\n * @param dispatch\n * @param params\n * @returns {Function}\n */\nconst bindActionCreatorAndParams = (actionCreator, dispatch, ...params) => {\n    return (...args) => dispatch(actionCreator(...params, ...args))\n}\n\nexport default{\n    createAsyncResponseActionNames,\n    createLocalSelector,\n    bindActionCreatorAndParams,\n    createReducer,\n    createActionCreator,\n    createReducerWithChildReducers\n}\n"]}