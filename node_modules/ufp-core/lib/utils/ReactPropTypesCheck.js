/**
 * @param {Object} object to be validated
 * @param {Object} propTypes object with defined prop types
 * @param {Boolean} _throw if set to true, invalid prop types will throw
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckPropTypes = exports.ReactPropTypesCheck = undefined;

var _checkPropTypes = require('check-prop-types');

var _checkPropTypes2 = _interopRequireDefault(_checkPropTypes);

var _JSUtils = require('./JSUtils');

var _JSUtils2 = _interopRequireDefault(_JSUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReactPropTypesCheck = exports.ReactPropTypesCheck = function ReactPropTypesCheck(object, propTypes, _throw) {
    console.warn('ReactPropTypesCheck is deprecated use CheckPropTypes() ');
    var propName;

    for (propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
            var error = (0, _checkPropTypes2.default)(propTypes, object, 'prop', 'UfpPropTypesCheck');
            if (error) {
                if (_throw) {
                    throw error;
                } else {
                    console.error(error.message);
                }
            }
        }
    }
};

/**
 * Executes the ReactPropType for an object,
 * @param object the object to check
 * @param propTypes react proptypes definition
 * @param name the name of the object (for message
 * @param doThrow if true method throws if false method returns true/false
 * @returns {boolean}
 * @constructor
 */
var CheckPropTypes = exports.CheckPropTypes = function CheckPropTypes(_ref) {
    var _ref$object = _ref.object,
        object = _ref$object === undefined ? _JSUtils2.default.ThrowParam('object parameter has to be set') : _ref$object,
        _ref$propTypes = _ref.propTypes,
        propTypes = _ref$propTypes === undefined ? _JSUtils2.default.ThrowParam('propTypes parameter has to be set') : _ref$propTypes,
        _ref$name = _ref.name,
        name = _ref$name === undefined ? 'Object' : _ref$name,
        _ref$doThrow = _ref.doThrow,
        doThrow = _ref$doThrow === undefined ? false : _ref$doThrow;

    var propName;

    for (propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
            var error = (0, _checkPropTypes2.default)(propTypes, object, 'prop', name);
            if (error) {
                if (doThrow) {
                    throw error;
                } else {
                    console.error(error.message);
                    return false;
                }
            }
        }
    }
    return true;
};

exports.default = {
    ReactPropTypesCheck: ReactPropTypesCheck,
    CheckPropTypes: CheckPropTypes
};
//# sourceMappingURL=ReactPropTypesCheck.js.map