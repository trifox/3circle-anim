// Generated by CoffeeScript 2.0.2
(function() {
  var Detector, JsCpd, Promise, Report, Strategy, debugPreprocessor, filesPreprocessor, logger, optionsPreprocessor;

  logger = require('winston');

  ({Detector} = require('./detector'));

  ({Strategy} = require('./strategy'));

  ({Report} = require('./report'));

  optionsPreprocessor = require('./preprocessors/options');

  filesPreprocessor = require('./preprocessors/files');

  debugPreprocessor = require('./preprocessors/debug');

  Promise = require("bluebird");

  JsCpd = (function() {
    class JsCpd {
      execPreProcessors(list) {
        var i, len, preProcessor;
        logger.profile('Preprocessors running time:');
        for (i = 0, len = list.length; i < len; i++) {
          preProcessor = list[i];
          preProcessor(this);
        }
        return logger.profile('Preprocessors running time:');
      }

      run(options) {
        var clone, codeMap, detector, generateReport, report, strategy;
        this.options = options;
        this.execPreProcessors(this.preProcessors);
        if (!this.options.debug) {
          logger.profile('Scanning for duplicates time:');
          if (this.options.selectedFiles.length) {
            logger.info(`Scanning ${this.options.selectedFiles.length} files for duplicates...`);
          }
          strategy = new Strategy(this.options);
          detector = new Detector(strategy);
          report = new Report(this.options);
          codeMap = detector.start(this.options.selectedFiles, this.options['min-lines'], this.options['min-tokens']);
          logger.profile('Scanning for duplicates time:');
          logger.info('Scanning... done!\n');
          logger.profile('Generate report time:');
          logger.info('Start report generation...\n');
          generateReport = () => {
            var reportResult;
            reportResult = report.generate(codeMap);
            logger.profile('Generate report time:');
            this.report = reportResult;
            this.map = codeMap;
            return {
              report: this.report,
              map: this.map
            };
          };
          if (this.options.blame) {
            return Promise.all((function() {
              var i, len, ref, results;
              ref = codeMap.clones;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                clone = ref[i];
                results.push(clone.blame());
              }
              return results;
            })()).then(generateReport).error(generateReport);
          } else {
            return generateReport();
          }
        }
      }

    };

    JsCpd.prototype.preProcessors = [optionsPreprocessor, filesPreprocessor, debugPreprocessor];

    JsCpd.prototype.LANGUAGES = [];

    return JsCpd;

  })();

  module.exports = JsCpd;

}).call(this);
