// Generated by CoffeeScript 2.0.2
(function() {
  var Blamer, Clone, Promise, shjs;

  shjs = require('shelljs');

  Blamer = require('blamer');

  Promise = require('bluebird');

  Clone = class Clone {
    constructor(firstFile, secondFile, firstFileStart, secondFileStart, linesCount, tokensCount) {
      this.firstFile = firstFile;
      this.secondFile = secondFile;
      this.firstFileStart = firstFileStart;
      this.secondFileStart = secondFileStart;
      this.linesCount = linesCount;
      this.tokensCount = tokensCount;
      this.firstFileAnnotatedCode = {};
      this.secondFileAnnotatedCode = {};
    }

    getLines(isFirstFile = true) {
      var code, end, lines, start;
      code = shjs.cat(isFirstFile ? this.firstFile : this.secondFile);
      start = isFirstFile ? this.firstFileStart : this.secondFileStart;
      lines = code.split('\n');
      end = start + this.linesCount;
      return lines.slice(start, +end + 1 || 9e9).join("\n");
    }

    blame() {
      var blamer;
      blamer = new Blamer;
      return Promise.all([blamer.blameByFile(this.firstFile), blamer.blameByFile(this.secondFile)]).then((results) => {
        var annotation, line, ref, ref1;
        ref = results[0][this.firstFile];
        for (line in ref) {
          annotation = ref[line];
          if (this.lineInRange(line, this.firstFileStart)) {
            this.firstFileAnnotatedCode[line] = annotation;
          }
        }
        ref1 = results[1][this.secondFile];
        for (line in ref1) {
          annotation = ref1[line];
          if (this.lineInRange(line, this.secondFileStart)) {
            this.secondFileAnnotatedCode[line] = annotation;
          }
        }
        return this;
      });
    }

    lineInRange(line, fileStart) {
      return 0 + line >= fileStart && 0 + line <= fileStart + this.linesCount;
    }

  };

  exports.Clone = Clone;

}).call(this);
